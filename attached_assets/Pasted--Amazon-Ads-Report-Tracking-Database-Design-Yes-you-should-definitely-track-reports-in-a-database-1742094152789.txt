# Amazon Ads Report Tracking Database Design

Yes, you should definitely track reports in a database table - this is crucial for report lifecycle management. Here's a comprehensive approach:

## Database Table Structure

```sql
CREATE TABLE amazon_ad_reports (
  id INT PRIMARY KEY AUTO_INCREMENT,
  report_id VARCHAR(50) NOT NULL,
  profile_id VARCHAR(20) NOT NULL,
  report_type VARCHAR(30) NOT NULL,
  status VARCHAR(20) DEFAULT 'PENDING',
  request_params JSON,
  download_url TEXT,
  url_expiry TIMESTAMP NULL,
  local_file_path VARCHAR(255) NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  last_checked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  completed_at TIMESTAMP NULL,
  retry_count INT DEFAULT 0,
  error_message TEXT NULL,
  INDEX (profile_id),
  INDEX (report_id),
  INDEX (status)
);
```

## Lifecycle Management

1. **Creating Report**
   ```javascript
   // Store initial request
   db.insert('amazon_ad_reports', {
     report_id: responseData.reportId,
     profile_id: profileId,
     report_type: 'campaigns',
     request_params: JSON.stringify({
       startDate, endDate, metrics: [...], adProduct: '...'
     }),
     status: 'PENDING'
   });
   ```

2. **Updating Status**
   ```javascript
   // On status check
   db.update('amazon_ad_reports', 
     { report_id: reportId },
     { 
       status: response.status,
       last_checked_at: new Date(),
       retry_count: db.raw('retry_count + 1'),
       download_url: response.status === 'SUCCESS' ? response.location : null,
       url_expiry: response.status === 'SUCCESS' ? 
         new Date(Date.now() + 60 * 60 * 1000) : null // 1 hour expiry
     }
   );
   ```

3. **Processing Reports**
   ```javascript
   // When download complete
   db.update('amazon_ad_reports',
     { report_id: reportId },
     {
       status: 'DOWNLOADED',
       completed_at: new Date(),
       local_file_path: '/data/reports/campaign_123456.csv'
     }
   );
   ```

## Implementation Best Practices

- Query for pending reports on startup to resume processing
- Add indexes on frequently queried fields
- Implement purge policy for old reports (30-90 days)
- Include error handling column to track failure reasons
- Add timestamp when URL expires
- Consider separate tables for different report types if schemas differ significantly

This gives you complete visibility into report processing status, handles crashes/restarts gracefully, and provides audit history for troubleshooting.