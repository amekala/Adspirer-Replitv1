# Amazon Ads Report Status Handling

Your implementation is now correctly handling the duplicate request scenario by extracting the existing report ID. Here are some enhancements to handle long-running reports:

## Current Status
- System correctly identifies existing report
- Implements 10s retry for PENDING status
- Reports remain in PENDING state longer than expected

## Implementation Improvements

1. **Progressive Backoff Strategy**
   ```javascript
   let retryCount = 0;
   const maxRetries = 12; // 2 minutes maximum wait
   
   function getBackoffTime(retry) {
     return Math.min(10000 * Math.pow(1.2, retry), 30000); // 10s → 12s → 14.4s → max 30s
   }
   
   async function pollReportStatus(reportId) {
     while (retryCount < maxRetries) {
       const status = await checkReportStatus(reportId);
       if (status === "SUCCESS") return downloadReport(reportId);
       if (status === "FAILURE") throw new Error("Report generation failed");
       
       const backoff = getBackoffTime(retryCount++);
       await sleep(backoff);
     }
     throw new Error("Report generation timeout");
   }
   ```

2. **Report Queue Management**
   - Store pending reports in database with reportId, profileId, timestamp
   - Implement background job to periodically check oldest reports first
   - Set max age threshold (30-60 mins) before re-requesting report

3. **Missing Status Handling**
   ```javascript
   if (status === "PENDING" || status === "IN_PROGRESS") {
     // Continue waiting
   } else if (status === "SUCCESS") {
     // Download and process
   } else if (status === "FAILURE") {
     // Handle specific failure
   } else {
     // Unknown status - log and escalate
     logger.warn(`Unknown report status: ${status} for report ${reportId}`);
   }
   ```

4. **Parallel Report Processing**
   - Process up to 5 profiles concurrently
   - Maintain separate retry counts for each report

Amazon reports typically complete within 5-10 minutes, but can take up to 30+ minutes during peak periods or for large datasets.